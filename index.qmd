---
title: 'Fun and Learning. In a Dungeon!'
subtitle: 'Matt Dray, March 2023'
format:
  revealjs: 
    theme: [default, assets/styles/dungeon-styles.scss]
---

##  tl;dr {.center}

Try project-driven learning. Have fun.

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com)

::: {.notes}

* 'Too long; didn't read' for a summary. Snapshot this slide and then fall asleep.
* Basically: try small-scale, focused project-driven learning where you have fun and fail. I've often found found this preferable to what I'm calling module-driven development.
* Links are to the R package I'll be talking about; to a series of blogs about its development; and to my own personal page.

:::

# \[0\] Hello

::: {.notes}

* We've got some exciting speakers today from a range of interesting organisations.
* ...And you've also got me.
* I've been in the Civil Service for nearly a decade in multiple data and analysis roles across several orgs.
* I'm currently involved in statistics quality, production, presentation and Reproducible Analytical Pipelines (RAP). Part of that will involve advising on learning and development.
* I'm not here to tell you anything particularly clever. This is not a technical talk, per se. I'm going to talk about capability, and learning and development,m ostly.

:::

## Disclaimers {.center}

* These are my thoughts
* We're all different
* This is context-dependent

::: {.notes}

* These are my personal experiences and I'm not speaking officially. 
* I'm privileged: my managers have given me time and space; I have some time to learn as a hobbyist too.
* What works for me might not work for you. Approaches may suit one environment but not another. 
* You might think about this from the perspective of a learner, or as a manager wanting to develop staff.

:::

# \[1\] The idea

::: {.notes}

* I had little experience of programming when I joined the Civil Service. I didn't come from a computer science background.
* I think I'm competent now (in R at least). I have a good sense of what has helped me develop on that journey.
* Maybe one person will rethink their approach to learning and development.
* Maybe one person will be mildly be amused by making R go off-piste, or will feel a pang of nostalgia.

:::

## Approaches {.center}

A. Module-driven

B. Project-driven

::: {.notes}

* I need to start by setting up a bit of a false dichotomy.
* I want to tell you about learning with a project-driven focus, which requires a definition.
* But I will also need to define what I think is the status quo, 'module-driven development', for comparison.

:::

## \[A\] Module-driven {.center}

* Passive walkthroughs
* Comprehension tests
* It's done _to_ you

::: {.notes}

* I'm talking generally about short videos or static documents, probably followed with comprehension exercises.
* This extends to taking part in big workshops with a low teacher-to-student ratio.
* I'm not naming any providers, but you might be able to think of some.
* The training is administered to you, a participant.

:::

## \[A\] Module-driven {.center}

* Box-ticking?
* Too generic?
* Forgettable?

::: {.notes}

* I've been told to do these to tick a box in my learning plan.
* They're rarely tailored to your specific needs.
* You're at the mercy of the trainer.
* Often not a good mimic of how the world actually works.
* They often lack engagement; you just need to sit through them all and get a passing grade.
* I personally find it difficult to retain the information and the notes are often just the content.

:::

## \[B\] Project-driven {.center}

* Solve a small 'problem'
* Discrete scope
* It's done _by_ you

::: {.notes}

* What do you need to learn? How can you make this a discrete project in the form of a package, an app, generative art, a series of scripts, etc?
* Limit its scope early, solve one problem, expand later.
* The learning is controlled by you, not administered to you. You are not a sponge.

:::

## \[B\] Project-driven {.center}

* Have fun
* Fail meaningfully
* Talk about it

::: {.notes}

* * The data you use and the functionality of the thing you create don't have to be meaningful. It might be something that helps your organisation. But it can be a bit silly, like in the example I'll show in a minute.
* Making a mistake will engage you to solve it.
* Broadcasting can help keep you in check, bring other people on your journey, and help you in unexpected ways. I don't think this is emphasised in modular learning.

:::

# \[2\] Example

::: {.notes}

* This is a project-driven example of mine.
* It's slightly contrived because I chose a past example that involves connectivity and patterns (themes of this conference).
* It also panders to the nerds.
* I'll tell you about some specific things I wanted to learn; the silly, discrete project I concocted to learn them; how communicating about it has helped me; and how this approach led to some unexpected bonus outcomes.

:::

## Goals {.center}

1. Interact with user
2. Detect and respond to IDE
3. Build simple algos from scratch

::: {.notes}

* I have a running list of things I want to learn. Sometimes these are really small things, like an individual function.
* A good exercise is to think how a few of them might be combined to achieve some goal.
* I expect to build packages for use by near-beginners; interactive confirmation is more friendly and could limit damage.
* Sometimes behaviour differs by operating system, but sometimes the development environment too. It's easy to get stuck thinking about RStudio if you're an R user, but what about people on the terminal or elsewhere?
* I mentioned coming into the Civil Service without computing experience. I think it's a good exercise to think through the logic of an approach and 'roll your own' in a learning context.

:::

## Format {.center}

* An R package
* Openly available on GitHub
* Communicate via dev logs, open code

## {.center-h}

<img src="assets/images/r.oguelike-chase.gif" alt="Output in the R terminal. The top section is a tile grid of characters laid out like an 80s videogame with text-only graphics, like Rogue. Red hashes are wall tiles Black periods are floor tiles. A green dollar sign, a yellow 'a', a pink letter 'E' and a blue 'at' symbol. UNderneath is a status bar with some inventory information and instructions on how to play. The cursor is waiting on a line that says 'input'.">

::: {.notes}
* Rogue was a simple game released in 1980 where the graphics are characters.
* An important feature was procedural generation: the dungeon was different every time you played.
* You had to collect items and battle enemies to recover an artifact.
* {r.oguelike} emulates this by creating a procedurally generated dungeon where you can collect items and battle an enemy.
:::

## Goals {.center}

1. Interact with user `r fontawesome::fa('check')`
2. Detect and respond to IDE `r fontawesome::fa('check')`
3. Build simple algorithms from scratch

## Procgen {.center}

::: {.panel-tabset}

## Step 1

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # . # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # . # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # . # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 2

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # . . . . . . . . . # # # # # # # # 
# # # . # # # # # # # . # # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # # . # # # # # # # # # # # # # # # # 
# # # . . . . . . . . . . . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 3

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # . # # . # # # # # # # # # # 
# # # . . . . . . . . . # # # # # # # # 
# # # . # # . # # # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . # # # # . # # # # # # # # # 
# # . . . . . . . . . . . . . # # # # # 
# # # # . . # # # # # # # # . # # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 4

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # . # . . # # # # # # # # # # 
# # . . . . . . . . . . # # # # # # # # 
# # . . # # . # . # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . # # # # . # # # # # # # # # 
# # . . . . . . . . . . . . . . # # # # 
# # # . . . # # . # . # # # . # # # # # 
# # # # . # # # # # # # # . . . # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 5

```
# # # # # # # # # # # # # # # # # # # # 
# # . # # # . # . . # # # # # # # # # # 
# . . . . . . . . . . . . # # # # # # # 
# # . . # # . # . # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . . # # # . # # # . . # # # # 
# # . . . . . . . . . . . . . . # # # # 
# # . . . . # . . # . # # # . # # # # # 
# # # # . # # # . # # # # . . . . # # # 
# # # # # # # # # # # # # . . . # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```
:::

::: {.notes}
* The process for dungeon building is simple
* Lay some randomised points
* Join them
* Expand randomly over n iterations
* It's actually more complicated than this
:::

## Pathfind {.center}

::: {.panel-tabset}

### Step 1

```
# # # # # # # 
# . . . . . # 
# . E . . . # 
# . . . . . # 
# # # # # . # 
# . . . . . # 
# . @ . . . # 
# . . . . . # 
# # # # # # # 
```

### 2

```
# # # # # # # 
# C B A 9 8 # 
# B A 9 8 7 # 
# A 9 8 7 6 # 
# # # # # 5 # 
# 2 1 2 3 4 # 
# 1 0 1 2 3 # 
# 2 1 2 3 4 # 
# # # # # # # 
```

### 3

```
# # # # # # # 
# . . . . . # 
# . . E . . # 
# . . . . . # 
# # # # # . # 
# . . . . . # 
# . @ . . . # 
# . . . . . # 
# # # # # # # 
```

:::

::: {.notes}

* How can the enemy navigate to the player?
* Generate a layer that gives you the number of tiles away from the player.
* Move the enemy to a tile with a lower value.

:::

## Goals {.center}

1. Interact with user `r fontawesome::fa('check')`
2. Detect and respond to IDE `r fontawesome::fa('check')`
3. Build simple algorithms from scratch `r fontawesome::fa('check')`

## {.center-h}

<img src="assets/images/r.oguelike-hex.png" width="20px" alt="A black hexagon with a green border. Text below center on the hexagon reads 'r.oguelike' in green. Above that is a 3 by 10 grid of punctuation characters in green. Far left and right edges are hashmarks and between them are periods, as well as a single 'at' symbol and dollar symbol. The pattern mimics a text-only roguelike videogame typical of the 1980s.">

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

## Format {.center}

* An R package `r fontawesome::fa('check')`
* Openly available on GitHub `r fontawesome::fa('check')`
* Communicate via dev logs, open code `r fontawesome::fa('check')`

## Bonus round {.center}

1. Snapshot testing
2. Play in-browser with Binder
3. Three dimensions?

## {.center-h}

<img src="assets/images/snapshot-pr.png" alt="A screenshot of a pull request in the r.oguelike GitHub repository. User trevorld added snapshot tests to the repo and matt-dray merged it.">

## {.center-h}

<img src="assets/images/issue.png" alt="A screenshot of an issue in the r.oguelike GitHub repository. User trickytank added a printout of an error after user input.">

## {.center-h}

<img src="assets/images/binder.png" alt="A screenshot of RStudio running in the browser with the package r.oguelike preinstalled.">

## {.center-h}

<img src="assets/images/isocubes-chase.gif" alt="Output in the R terminal. The top section is a tile grid of characters laid out like an 80s videogame with text-only graphics, like Rogue. Red hashes are wall tiles. Black periods are floor tiles. A green dollar sign, a yellow 'a', a pink letter 'E' and a blue 'at' symbol. Underneath is a status bar with some inventory information and instructions on how to play. The cursor is waiting on a line that says 'input'.">

## \[B\] Project-driven {.center}

* Have fun `r fontawesome::fa('check')`
* Fail meaningfully `r fontawesome::fa('check')`
* Talk about it `r fontawesome::fa('check')`

# \[3\] Actions

::: {.notes}
* Here's what I want you to consider.
:::

## In-gov {.center}

* [Accelerators](https://www.gov.uk/government/publications/data-science-accelerator-programme/introduction-to-the-data-science-accelerator-programme)
* [Volunteering](https://analysisfunction.civilservice.gov.uk/careers/volunteering/)
* [Coffee & Coding](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/coffee-and-coding/#cabinet-office)

::: {.notes}
* There are some structured offers that implement contained, project-driven learning.
* Data Science and visualisation accelerators are cross-government.
* You are entitled to volunteering, where you could take on a project-driven approach.
* Coffee & Coding (or similar) let you share your progress, hold yourself to account and to network with the wider analytical community. This can improve your chances of those 'bonus' features for your project.
:::

## External {.center}

* [tidytuesday](https://github.com/rfordatascience/tidytuesday)
* [30DayChartChallenge](https://30daychartchallenge.org/), [30DayMapChallenge](https://30daymapchallenge.com/)
* [genuary](https://genuary.art/)

::: {.notes}
* There are several prompt-driven schemes that also work in the context of project-driven learning.
* Tidytuesday is a community-driven event that provides a dataset on a weekly basis that you can go away and explore to produce some kind of output (a table, a chart, an app, etc).
* There's a bunch of month-long events throughout the year that do a similar thing, but give you a daily challenge within the monthly theme (e.g. charts, maps, generative).
:::

## To reiterate {.center}

* Module-driven isn't always bad
* Project-driven might be useful

##  tl;dr {.center}

Try project-driven learning. Have fun.

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com)
