---
title: 'Fun and Learning. In a Dungeon!'
subtitle: 'Matt Dray, March 2023'
format:
  revealjs: 
    theme: [default, assets/styles/dungeon-styles.scss]
    code-overflow: wrap
    # footer: '[matt-dray.github.io/in-a-dungeon](https://matt-dray.github.io/in-a-dungeon)'
---

##  tl;dr {.center}

Try project-driven learning. Have fun.

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com)

# \[0\] Hello

::: {.notes}
* I've had multiple roles in five orgs.
* Currently involved in statistics quality, production, presentation and (Reproducible Analytical Pipelines) RAP.
* I had little experience when I started.
:::

## Disclaimers {.center}

* These are my thoughts
* We're all different
* I'm privileged

::: {.notes}
* These are my personal experiences and I'm not speaking officially. 
* My managers give me time and space and I can afford to use my free time too.
* What works for me might not work for you.
:::

# \[1\] The problem

## Definitions {.center}

1. Module-driven
2. Project-driven

::: {.notes}
* 'Normal'
* 'Rare'
:::

## \[1\] Module-driven {.center}

* Checkbox exercise
* Passive
* Forgettable

::: {.notes}
* It ticks a box in your learning plan.
* It isn't tailored to your needs.
* Lacks engagement.
:::

## \[2\] Project-driven {.center}

* Solve a problem
* Fail
* Talk about it

::: {.notes}
* What if you could focus on a problem to solve and work towards it?
* Limit its scope early, solve one problem, expand later.
* Broadcasting can help keep you in check, bring other people on your journey, and help you in unexpected ways. 
:::

# \[2\] Example

::: {.notes}
* This is a project-driven example of mine.
* It's slightly contrived.
* It involves connectivity and patterns, which are themes of this conference.
* But it also panders to the nerds.
:::

## Goals {.center}

1. Procgen, pathfinding
1. User interaction
1. Packaging

## {.center-h}

<img src="assets/images/r.oguelike-hex.png" width="20px" alt="A black hexagon with a green border. Text below center on the hexagon reads 'r.oguelike' in green. Above that is a 3 by 10 grid of punctuation characters in green. Far left and right edges are hashmarks and between them are periods, as well as a single 'at' symbol and dollar symbol. The pattern mimics a text-only roguelike videogame typical of the 1980s.">

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

::: {.notes}
* You can access the R package on GitHub.
* I've written a series of blog posts about the development of this package.
:::

## {.center-h}

<img src="assets/images/start-game.png" alt="Output in the R terminal. The top section is a tile grid of characters laid out like an 80s videogame with text-only graphics, like Rogue. Red hashes are wall tiles Black periods are floor tiles. A green dollar sign, a yellow 'a', a pink letter 'E' and a blue 'at' symbol. UNderneath is a status bar with some inventory information and instructions on how to play. The cursor is waiting on a line that says 'input'.">

::: {.notes}
* Rogue was a simple game released in 1980 where the graphics are characters.
* An important feature was procedural generation: the dungeon was different every time you played.
* You had to collect items and battle enemies to recover an artifact.
* {r.oguelike} emulates this by creating a procedurally generated dungeon where you can collect items and battle an enemy.
:::

## Procgen {.center}

::: {.panel-tabset}

## Step 1

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # . # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # . # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # . # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 2

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # . . . . . . . . . # # # # # # # # 
# # # . # # # # # # # . # # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # # . # # # # # # # # # # # # # # # # 
# # # . . . . . . . . . . . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 3

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # . # # . # # # # # # # # # # 
# # # . . . . . . . . . # # # # # # # # 
# # # . # # . # # # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . # # # # . # # # # # # # # # 
# # . . . . . . . . . . . . . # # # # # 
# # # # . . # # # # # # # # . # # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 4

```
# # # # # # # # # # # # # # # # # # # # 
# # # # # # . # . . # # # # # # # # # # 
# # . . . . . . . . . . # # # # # # # # 
# # . . # # . # . # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . # # # # . # # # # # # # # # 
# # . . . . . . . . . . . . . . # # # # 
# # # . . . # # . # . # # # . # # # # # 
# # # # . # # # # # # # # . . . # # # # 
# # # # # # # # # # # # # . . # # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

## 5

```
# # # # # # # # # # # # # # # # # # # # 
# # . # # # . # . . # # # # # # # # # # 
# . . . . . . . . . . . . # # # # # # # 
# # . . # # . # . # # . . # # # # # # # 
# # # . # # # # # . . . # # # # # # # # 
# # . . # . . # # # . # # # . . # # # # 
# # . . . . . . . . . . . . . . # # # # 
# # . . . . # . . # . # # # . # # # # # 
# # # # . # # # . # # # # . . . . # # # 
# # # # # # # # # # # # # . . . # # # # 
# # # # # # # # # # # # # # . # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```
:::

::: {.notes}
* The process for dungeon building is simple
* Lay some randomised points
* Join them
* Expand randomly over n iterations
* It's actually more complicated than this
:::

## Pathfind {.center}

::: {.panel-tabset}

### Step 1

```
# # # # # # # 
# . . . . . # 
# . E . . . # 
# . . . . . # 
# # # # # . # 
# . . . . . # 
# . @ . . . # 
# . . . . . # 
# # # # # # # 
```

### 2

```
# # # # # # # 
# C B A 9 8 # 
# B A 9 8 7 # 
# A 9 8 7 6 # 
# # # # # 5 # 
# 2 1 2 3 4 # 
# 1 0 1 2 3 # 
# 2 1 2 3 4 # 
# # # # # # # 
```

### 3

```
# # # # # # # 
# . . . . . # 
# . . E . . # 
# . . . . . # 
# # # # # . # 
# . . . . . # 
# . @ . . . # 
# . . . . . # 
# # # # # # # 
```

:::

::: {.notes}
* How can the enemy navigate to the player?
* Generate a layer that gives you the number of tiles away from the player.
* Move the enemy to a tile with a lower value.
:::

## Bonuses {.center}

1. Snapshot test
1. Binder
1. Dev logs

# \[3\] Actions

::: {.notes}
* Here's what I want you to consider.
:::

## In-gov {.center}

* [Accelerators](https://www.gov.uk/government/publications/data-science-accelerator-programme/introduction-to-the-data-science-accelerator-programme)
* [Volunteering](https://analysisfunction.civilservice.gov.uk/careers/volunteering/)
* [Coffee & Coding](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/coffee-and-coding/#cabinet-office)

::: {.notes}
* There are some structured offers that implement contained, project-driven learning.
* Data Science and visualisation accelerators are cross-government.
* You are entitled to volunteering, where you could take on a project-driven approach.
* Coffee & Coding (or similar) let you share your progress, hold yourself to account and to network with the wider analytical community. This can improve your chances of those 'bonus' features for your project.
:::

## External {.center}

* [tidytuesday](https://github.com/rfordatascience/tidytuesday)
* [30DayChartChallenge](https://30daychartchallenge.org/), [30DayMapChallenge](https://30daymapchallenge.com/), [genuary](https://genuary.art/)
* [Advent of Code](https://adventofcode.com/)

::: {.notes}
* There are several prompt-driven schemes that also work in the context of project-driven learning.
* Tidytuesday is a community-driven event that provides a dataset on a weekly basis that you can go away and explore to produce some kind of output (a table, a chart, an app, etc).
* There's a bunch of month-long events throughout the year that do a similar thing, but give you a daily challenge within the monthly theme (e.g. charts, maps, generative).
:::

##  tl;dr {.center}

Try project-driven learning. Have fun.

`r fontawesome::fa('github')` [github.com/matt-dray/r.oguelike](https://github.com/matt-dray/r.oguelike)

`r fontawesome::fa('book')` [rostrum.blog/tags/r.oguelike/](https://www.rostrum.blog/tags/r.oguelike/)

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com)
